_target_: src.modules.multimodal_vpc.MultiModalVPCModel

defaults:
  # - network: classification.yaml
  - _self_

model:
  # text_encoder:
  #   _target_: transformers.RobertaModel.from_pretrained
  #   pretrained_model_name_or_path: roberta-base
  
  # text_tokenizer:
  #   _target_: transformers.RobertaTokenizer.from_pretrained
  #   pretrained_model_name_or_path: roberta-base

  # audio_processor:
    # _target_: transformers.Wav2Vec2FeatureExtractor.from_pretrained
    # pretrained_model_name_or_path: superb/wav2vec2-base-superb-sid

  # audio_encoder:
    # _target_: transformers.Wav2Vec2Model.from_pretrained
    # pretrained_model_name_or_path: superb/wav2vec2-base-superb-sid

  text_processor:
    _target_: transformers.Wav2Vec2Processor.from_pretrained
    pretrained_model_name_or_path: "facebook/wav2vec2-base-960h"

  text_processor_kwargs:
    return_tensors: "pt"
    sampling_rate: 16000

  text_encoder:
    _target_: transformers.Wav2Vec2ForCTC.from_pretrained
    pretrained_model_name_or_path: "facebook/wav2vec2-base-960h"
    num_labels: ${module.model.classifiers.classifiers_config.num_classes}

  audio_encoder:
    _target_: speechbrain.inference.EncoderClassifier.from_hparams
    source: "speechbrain/spkrec-ecapa-voxceleb"
    savedir: "local/.pretrained_models/spkrec-ecapa-voxceleb"
    run_opts:
      device: "cuda"

  classifiers:
    text_classifier: 
      _target_: torch.nn.Linear
      in_features: ${module.model.classifiers.classifiers_config.linear_in_dim}
      out_features: ${module.model.classifiers.classifiers_config.linear_out_dim}

    audio_classifier: 
      _target_: torch.nn.Linear
      in_features: ${module.model.classifiers.classifiers_config.audio_embedding_dim}
      out_features: ${module.model.classifiers.classifiers_config.linear_out_dim}

    audio_embeds_classifier: 
      _target_: torch.nn.Linear
      in_features: ${module.model.classifiers.classifiers_config.audio_embedding_dim}
      out_features: ${module.model.classifiers.classifiers_config.num_classes}

    fusion_classifier:
      _target_: torch.nn.Sequential
      _args_:
        - _target_: torch.nn.Linear
          in_features: ${module.model.classifiers.classifiers_config.fusion_in_dim}
          out_features: ${module.model.classifiers.classifiers_config.fusion_out_dim}
        - _target_: torch.nn.ReLU
          inplace: True
        - _target_: torch.nn.Dropout
          p: 0.1
        - _target_: torch.nn.Linear
          in_features: ${module.model.classifiers.classifiers_config.fusion_out_dim}
          out_features: ${module.model.classifiers.classifiers_config.num_classes} 

    classifiers_config:
      num_classes: ${datamodule.num_classes}
      linear_in_dim: 32 #768
      audio_embedding_dim: 192 #512
      linear_out_dim: 64
      fusion_in_dim: 128
      fusion_out_dim: 128

criterion:
  criterion_train:
    fusion_criterion:
      _target_: torch.nn.CrossEntropyLoss
    audio_criterion:
      _target_: torch.nn.CrossEntropyLoss

  criterion_val:
    fusion_criterion:
      _target_: torch.nn.CrossEntropyLoss
    audio_criterion:
      _target_: torch.nn.CrossEntropyLoss

  criterion_test:
    fusion_criterion:
      _target_: torch.nn.CrossEntropyLoss
    audio_criterion:
      _target_: torch.nn.CrossEntropyLoss
  
  loss: ${module.criterion.criterion_train.fusion_criterion} # for callbacks

gradient_clip_val: 5.0

optimizer:
  _target_: torch.optim.AdamW
  _partial_: True
  lr: 3.0e-4
  weight_decay: 1.0e-5

lr_scheduler:
  scheduler:
    _target_: torch.optim.lr_scheduler.ReduceLROnPlateau
    mode: "max"
    factor: 0.3
    min_lr: 1.0e-9
    patience: 4
    verbose: True
  extras:
    monitor: ${replace:"__metric__/valid"}
    interval: "epoch"
    frequency: 1

metrics:
  main:
    _target_: "torchmetrics.Accuracy"
    task: "multiclass"
    num_classes: ${module.model.classifiers.classifiers_config.num_classes}
  valid_best:
    _target_: "torchmetrics.MaxMetric"
  # additional:
  #   AUROC:
  #     _target_: "torchmetrics.AUROC"
  #     task: "binary"

logging_params:
  on_step: False
  on_epoch: True
  sync_dist: True
  prog_bar: True

batch_sizes:
  train: ${datamodule.loaders.train.batch_size}
  valid: ${datamodule.loaders.valid.batch_size}
  test: ${datamodule.loaders.test.batch_size}